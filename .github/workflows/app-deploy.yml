name: Mood Meter CI/CD

on:
  push:
    paths:
      - 'products/backend/**'
      - 'products/frontend/**'
      - '.github/workflows/app-deploy.yml'
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release:
        description: 'Run release pipeline'
        required: false
        default: 'false'

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.dep-cache.outputs.cache-hit }}
      envs: ${{ steps.set-env.outputs.envs }}
      backend-image: ${{ steps.backend-image.outputs.image }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine deployment environments
        id: set-env
        run: |
          envs='["Dev"]'
          echo "envs=$envs" >> $GITHUB_OUTPUT
          exit 0

          # For future expansion
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            envs='["Dev"]'
          elif [ "${{ github.event_name }}" = "push" ]; then
            envs='["QA"]'
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            envs='["Prod"]'
          fi

      - name: Setup Node.js & Cache Dependencies
        id: dep-cache
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint & Unit Tests
        run: |
          npm run lint --if-present
          npm test --if-present

      - name: Build
        run: |
          npm run build -w products/backend
          VITE_BACKEND_URL=${{ vars.HEROKU_API_URL }} npm run build -w products/frontend

      - name: Bump Extension Version
        id: version
        working-directory: products/frontend
        run: |
          npm version patch --no-git-tag-version --silent
          NEW_VER=$(node -p "require('./package.json').version")
          echo "version=$NEW_VER" >> $GITHUB_OUTPUT

      - name: Zip Frontend Build
        run: |
          VERSION=${{ steps.version.outputs.version }}
          cd products/frontend/dist
          zip -r ../../extension-$VERSION.zip .

      - name: Upload Frontend ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-zip
          path: products/extension-*.zip
          if-no-files-found: error

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Backend Docker Image
        id: backend-image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=ghcr.io/${OWNER}/mood-meter-backend:${{ github.sha }}
          docker build -t "$IMAGE_NAME" products/backend
          docker push "$IMAGE_NAME"
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

  deploy-app:
    name: Deploy - ${{ matrix.environment }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.prepare.outputs.envs) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy Backend API
        uses: ./.github/actions/heroku/deploy
        with:
          image: ${{ needs.prepare.outputs.backend-image }}
          app-name: ${{ vars.HEROKU_APP_NAME }}
          api-key: ${{ secrets.HEROKU_API_KEY }}

  release-app:
    name: Create Release
    needs: [prepare, deploy-app]
    runs-on: ubuntu-latest
    environment:
      name: approval
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true' }}
    steps:
      - name: Get released version from Twitch
        id: cdn
        uses: ./.github/actions/twitch/get-released-version
        with:
          client-id: ${{ secrets.TWITCH_CLIENT_ID }}
          client-secret: ${{ secrets.TWITCH_CLIENT_SECRET }}

      - name: Verify bumped version matches CDN release
        run: |
          echo "CDN version: ${{ steps.cdn.outputs.released-version }}";
          echo "Bumped version: ${{ needs.prepare.outputs.version }}";
          if [ "${{ steps.cdn.outputs.released-version }}" != "${{ needs.prepare.outputs.version }}" ]; then
            echo "Version mismatch. Aborting release.";
            exit 1;
          fi

      - name: Create version bump PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: bump extension version to v${{ needs.prepare.outputs.version }}'
          branch: 'version-bump/v${{ needs.prepare.outputs.version }}'
          title: 'Bump extension version to v${{ needs.prepare.outputs.version }}'
          body: |
            This PR was autogenerated by the CI release job.

            - version: `v${{ needs.prepare.outputs.version }}`
            - matches Twitch CDN released version.
          add-paths: |
            products/frontend/package.json
            products/frontend/package-lock.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: Release v${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
