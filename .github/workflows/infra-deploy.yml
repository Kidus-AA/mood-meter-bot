name: Terraform Infra Deploy

on:
  push:
    paths:
      - 'products/infra/**'
      - 'products/poller/**'
      - 'products/scripts/configure-dynos.sh'
      - '.github/workflows/infra-deploy.yml'
    branches: [main]
  workflow_dispatch:
    inputs:
      app-name:
        description: 'Heroku app name'
        required: true
        default: mood-meter-poc
      app-dynos:
        description: 'Comma-separated list of dynos to deploy'
        required: false
        default: web,poller

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  TF_WORKING_DIR: products/infra
  AWS_REGION: us-east-1
  S3_BUCKET: mood-meter-storage

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      app-name: ${{ inputs.app-name || 'mood-meter-poc' }}
      app-dynos: ${{ inputs.app-dynos || 'web,poller' }}
    steps:
      - name: Set Inputs
        id: set-inputs
        run: |
          echo "app-name=${{ inputs.app-name || 'mood-meter-poc' }}" >> $GITHUB_OUTPUT
          echo "app-dynos=${{ inputs.app-dynos || 'web,poller' }}" >> $GITHUB_OUTPUT

  deploy-infra:
    runs-on: ubuntu-latest
    needs: [prepare]

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Heroku CLI
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl -sSL https://cli-assets.heroku.com/install-ubuntu.sh | sudo bash
          heroku authorizations:create --description "github-ci" || true
          heroku auth:whoami

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Setup Terraform Variables
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo '${{ secrets.TERRAFORM_TF_VARS }}' | base64 --decode > terraform.auto.tfvars
          chmod 600 terraform.auto.tfvars

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=${{ needs.prepare.outputs.app-name }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply (Heroku App)
        id: tf_app
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          terraform apply -auto-approve -target=module.mood_meter.heroku_app.this

      - name: Backup Terraform State
        id: backup_state
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          set -euo pipefail
          if ! aws s3api head-bucket --bucket "${{ env.S3_BUCKET }}" >/dev/null 2>&1; then
            echo "S3 bucket '${{ env.S3_BUCKET }}' does not exist or is not accessible" >&2
            exit 0
          else
            BACKUP_KEY="${{ needs.prepare.outputs.app-name }}-backup-${GITHUB_RUN_ID}.tfstate"
            STATE_KEY="${{ needs.prepare.outputs.app-name }}.tfstate"

            aws s3 cp "s3://${{ env.S3_BUCKET }}/${STATE_KEY}" "s3://${{ env.S3_BUCKET }}/${BACKUP_KEY}"
            echo "backup-key=$BACKUP_KEY" >> $GITHUB_OUTPUT
          fi

      - name: Ensure Dynos Exist
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ needs.prepare.outputs.app-name }}
          DYNO_TYPES: ${{ needs.prepare.outputs.app-dynos }}
        run: |
          npm run configure-dynos

      - name: Terraform Apply (Full Stack)
        id: tf_full
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: terraform apply -auto-approve

      - name: Rollback State
        if: failure()
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          set -euo pipefail
          if [[ -z "${{ steps.backup_state.outputs.backup_key }}" ]]; then
            echo "No backup state key found â€“ skipping rollback." >&2
            exit 0
          fi

          echo "Restoring Terraform state from s3://${{ env.S3_BUCKET }}/${{ steps.backup_state.outputs.backup-key }}"
          aws s3 cp "s3://${{ env.S3_BUCKET }}/${{ steps.backup_state.outputs.backup-key }}" "s3://${{ env.S3_BUCKET }}/${{ needs.prepare.outputs.app-name }}.tfstate"
          echo "State restored."
